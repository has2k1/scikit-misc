[project]
name = "scikit-misc"
description = "Miscellaneous tools for scientific computing."
license = {file = "LICENSE"}
requires-python = ">=3.8"
authors = [
  {name = "Hassan Kibirige", email = "has2k1@gmail.com"},
]
dynamic = ['version']
# long_description = {file = "README.rst"}
# long_description_content_type = "text/rst"
dependencies = [
    # TODO: update to "pin-compatible" once possible, see
    # https://github.com/FFY00/meson-python/issues/29
    "numpy>=1.19.5",
]
classifiers = [
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: BSD License",
    "Operating System :: Unix",
    "Operating System :: MacOS",
    "Operating System :: Microsoft :: Windows",
    "Operating System :: POSIX",
    "Programming Language :: C",
    "Programming Language :: Fortran",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Scientific/Engineering",
]

[project.optional-dependencies]
test = [
  "pytest-cov",
]
doc = [
  "numydoc",
  "sphinx",
]
dev = [
  "wheel",
  "twine"
]

[project.urls]
homepage = "https://has2k1.github.io/scikit-misc/stable"
repository = "https://github.com/has2k1/scikit-misc"
documentation = "https://has2k1.github.io/scikit-misc/stable"
changelog = "https://has2k1.github.io/scikit-misc/stable/changelog.html"

[build-system]
build-backend = 'mesonpy'
requires = [
    "meson-python>=0.9.0",
    "Cython>=0.29.32",
    "setuptools",
    "wheel",
    "oldest-supported-numpy"
]


[tool.pytest.ini_options]
testpaths = [
    "skmisc/loess/tests"
]
doctest_optionflags = "ALLOW_UNICODE ALLOW_BYTES NORMALIZE_WHITESPACE"
addopts = "--pyargs --cov=skmisc --cov-report=xml --import-mode=importlib"


[tool.coverage.run]
branch = true
source = ["skmisc"]
omit = [
    "skmisc/__config__.py",
]

[tool.devpy]
package = "skmisc"

[tool.devpy.commands]
Build = [
    "devpy.build",
    "devpy.test",
    ".devpy/cmds.py:docs",
    ".devpy/cmds.py:coverage",
    ".devpy/cmds.py:coverage_html",
    ".devpy/cmds.py:sdist",
]
Environments = [
    "devpy.shell",
    "devpy.ipython",
    "devpy.python",
]

[tool.cibuildwheel]
skip = "pp* *_ppc64le *_i686 *_s390x *-musllinux*"
build-verbosity = "3"
# gmpy2 and scikit-umfpack are usually added for testing. However, there are
# currently wheels missing that make the test script fail.
test-requires = ["pytest", "pytest-cov"]
test-command = "bash {project}/tools/wheels/cibw_test_command.sh {project}"

[tool.cibuildwheel.linux]
manylinux-x86_64-image = "manylinux2014"
manylinux-aarch64-image = "manylinux2014"
before-build = "bash {project}/tools/wheels/cibw_before_build_linux.sh {project}"

[tool.cibuildwheel.macos]
before-build = "bash {project}/tools/wheels/cibw_before_build_macos.sh {project}"
test-skip = "cp38-macosx_arm64"

[tool.cibuildwheel.windows]
before-build = "bash {project}/tools/wheels/cibw_before_build_win.sh {project}"
repair-wheel-command = "bash ./tools/wheels/repair_windows.sh {wheel} {dest_dir}"

[[tool.cibuildwheel.overrides]]
select = "*-win32"

[[tool.cibuildwheel.overrides]]
select = "*-win_amd64"
# can use pkg-config detection for win_amd64 because the installed rtools
# provide a working pkg-config.
# An alternative is to set CMAKE_PREFIX_PATH="c:/opt/openblas/if_32/32"
# Don't use double backslash for path separators, they don't get passed
# to the build correctly
environment = { PKG_CONFIG_PATH="c:/opt/openblas/if_32/64/lib/pkgconfig" }
