# Ref: https://github.com/scipy/scipy/blob/main/.github/workflows/windows.yml

# Workflow to build and test wheels.
# To work on the wheel building infrastructure on a fork, comment out:
#
# if: github.repository == 'has2k1/scikit-misc'
#
# in the get_commit_message job include [wheel build] in your commit
# message to trigger the build. All files related to wheel building are located
# at tools/wheels/
name: Wheel Builder
on:
  schedule:
  #        ┌───────────── minute (0 - 59)
  #        │  ┌───────────── hour (0 - 23)
  #        │  │ ┌───────────── day of the month (1 - 31)
  #        │  │ │ ┌───────────── month (1 - 12 or JAN-DEC)
  #        │  │ │ │ ┌───────────── day of the week (0 - 6 or SUN-SAT)
  #        │  │ │ │ │
  - cron: "0  0 * * 6"
  push:
    tags:
      - v*
    branches:
      - wheels
  workflow_dispatch:

permissions:
   contents: read  # to fetch code (actions/checkout)

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  parse_commit_info:
    name: Parse Commit Information
    runs-on: ubuntu-latest
    if: github.repository == 'has2k1/scikit-misc'
    outputs:
      can_build: ${{ steps.decide.outputs.can_build }}
      can_release: ${{ steps.decide.outputs.can_release }}
      can_pre_release: ${{ steps.decide.outputs.can_pre_release }}
    steps:
      - name: Checkout scikit-misc
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Fetch all Tags
        run: |
          git fetch --tags --force

      - name: Copy build utils
        run: |
          cp -r .github/utils ../utils

      - name: Checkout build target
        run: |
          python ../utils/please.py checkout_build_commit

      - name: Environment information
        run: |
          echo "GITHUB_REPOSITORY=$GITHUB_REPOSITORY"
          echo "GITHUB_SHA=$GITHUB_SHA"
          echo "GITHUB_REF_NAME=$GITHUB_REF_NAME"
          echo "GITHUB_REF_TYPE=$GITHUB_REF_TYPE"
          echo "GITHUB_EVENT_NAME=$GITHUB_EVENT_NAME"
          echo "git describe: $(git describe --long)"

      - name: Decide Whether to Build and/or Release
        id: decide
        run: |
          set -xe
          CAN_RELEASE=$(python ../utils/please.py can_i_release)
          CAN_PRE_RELEASE=$(python ../utils/please.py can_i_pre_release)

          if [[ $CAN_RELEASE == "true" ]]; then
            CAN_BUILD="true"
          elif [[ $CAN_PRE_RELEASE == "true" ]]; then
            CAN_BUILD="true"
          else
            CAN_BUILD=$(python ../utils/please.py can_i_build)
          fi

          echo "can_build=$CAN_BUILD" >> $GITHUB_OUTPUT
          echo "can_release=$CAN_RELEASE" >> $GITHUB_OUTPUT
          echo "can_pre_release=$CAN_PRE_RELEASE" >> $GITHUB_OUTPUT
          echo github.ref ${{ github.ref }}

  build_wheels:
    name: Build wheel for ${{ matrix.python[0] }}-${{ matrix.buildplat[1] }} ${{ matrix.buildplat[2] }}
    needs: parse_commit_info

    if: contains(needs.parse_commit_info.outputs.can_build, 'true')
    runs-on: ${{ matrix.buildplat[0] }}

    strategy:
      # Ensure that a wheel builder finishes even if another fails
      fail-fast: false
      matrix:
        # Github Actions doesn't support pairing matrix values together, let's improvise
        # https://github.com/github/feedback/discussions/7835#discussioncomment-1769026
        buildplat:
        # should also be able to do multi-archs on a single entry, e.g.
        # [windows-2019, win*, "AMD64 x86"]. However, those two require a different compiler setup
        # so easier to separate out here.
        - [ubuntu-22.04, manylinux, x86_64]

        - [macos-11, macosx, x86_64]
        - [windows-2019, win, AMD64]

        python: [["cp38", "3.8"], ["cp39", "3.9"], ["cp310", "3.10"], ["cp311", "3.11"]]

    env:
      IS_32_BIT: ${{ matrix.buildplat[2] == 'x86' }}
      IS_64_BIT: ${{ matrix.buildplat[2] == 'AMD64' || matrix.buildplat[2] == 'x86_64' }}

    steps:
      - name: Checkout scikit-misc
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Fetch all Tags
        run: |
          git fetch --tags --force
          echo "git describe: $(git describe --long)"

      - name: Copy build utils
        run: |
          cp -r .github/utils ../utils

      - uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Checkout build target
        run: |
          python ../utils/please.py checkout_build_commit

      - name: win_amd64 - install rtools
        if: ${{ runner.os == 'Windows' && env.IS_64_BIT == 'true' }}
        run: |
          # mingw-w64
          choco install rtools --no-progress
          echo "c:\rtools40\ucrt64\bin;" >> $env:GITHUB_PATH

#      - name: win32 - configure mingw for 32-bit builds
#        if: ${{ runner.os == 'Windows' && env.IS_32_BIT == 'true' }}
#        run: |
#          # taken from numpy wheels.yml script
#          # Force 32-bit mingw. v 8.1.0 is the current version used to build
#          # the 32 bit openBLAS library (not sure if that matters)
#          choco uninstall mingw
#          choco install -y mingw --forcex86 --force --version=8.1.0
#          echo "C:\ProgramData\chocolatey\lib\mingw\tools\install\mingw32\bin;" >> $env:GITHUB_PATH
#          echo $(gfortran --version)
#          echo $(gcc --version)

      - name: Build wheels
        uses: pypa/cibuildwheel@v2.12.0
        if: >-
          ( ! contains(matrix.buildplat[2], 'arm64' ) )
        env:
          CIBW_BUILD: ${{ matrix.python[0] }}-${{ matrix.buildplat[1] }}*
          CIBW_ARCHS: ${{ matrix.buildplat[2] }}
          CIBW_ENVIRONMENT_PASS_LINUX: RUNNER_OS

          # setting SDKROOT necessary when using the gfortran compiler
          # installed in cibw_before_build_macos.sh
          # MACOS_DEPLOYMENT_TARGET is set because of
          # https://github.com/pypa/cibuildwheel/issues/1419. Once that
          # is closed and an update to pypa/cibuildwheel is done, then
          # that environment variable can be removed.
          CIBW_ENVIRONMENT_MACOS: >
            SDKROOT=/Applications/Xcode_11.7.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.15.sdk
            LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH
            MACOSX_DEPLOYMENT_TARGET=10.9
            MACOS_DEPLOYMENT_TARGET=10.9
            _PYTHON_HOST_PLATFORM=macosx-10.9-x86_64
          CIBW_REPAIR_WHEEL_COMMAND_MACOS: >
            DYLD_LIBRARY_PATH=/usr/local/lib delocate-listdeps {wheel} &&
            DYLD_LIBRARY_PATH=/usr/local/lib delocate-wheel --require-archs {delocate_archs} -w {dest_dir} {wheel}

      - name: Check Package Version
        run: |
          ls wheelhouse/*.whl
          python ../utils/check_package_version.py

      - uses: actions/upload-artifact@v3
        with:
          name: wheels
          path: ./wheelhouse/*.whl

  build_sdist:
    runs-on: ubuntu-latest
    name: Build Source Distribution
    needs: [build_wheels]
    steps:
      - name: Checkout scikit-misc
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Fetch all Tags
        run: |
          git fetch --tags --force

      - name: Copy build utils
        run: |
          cp -r .github/utils ../utils

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Checkout build target
        run: |
          python ../utils/please.py checkout_build_commit

      - name: Install Ubuntu dependencies
        run: |
          sudo apt-get update
          sudo apt-get install libopenblas-dev liblapack-dev gfortran

      - name: Install requirements
        run:
          pip install -r requirements/build.txt

      - name: Create Source Distribution
        run: |
          make sdist

      - name: Check Package Version
        run: |
          ls dist/*.tar.gz
          python ../utils/check_package_version.py

      - name: Upload Source dist
        uses: actions/upload-artifact@v3
        with:
          name: wheels
          path: dist

  release:
    runs-on: ubuntu-latest
    name: Upload Release to PyPI
    needs: [build_wheels, build_sdist, parse_commit_info]
    if: contains(needs.parse_commit_info.outputs.can_release, 'true')
    steps:
      - name: Checkout scikit-misc
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install Release Requirements
        run: |
          pip install -r requirements/release.txt

      - name: Download wheels
        uses: actions/download-artifact@v3
        with:
          name: wheels
          path: dist

      - name: Publish to PyPI
        run: |
          ls -la ${{ github.workspace }}/dist

          # publish wheels first so that there is no window where users
          # may accidentally install an sdist instead of a wheel
          twine upload --skip-existing ${{ github.workspace }}/dist/*.whl
          twine upload --skip-existing ${{ github.workspace }}/dist/*.tar.gz
        env:
          TWINE_USERNAME: ${{ secrets.TWINE_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.TWINE_PASSWORD }}

  pre_release:
    runs-on: ubuntu-latest
    name: Upload Release to TestPyPI
    needs: [build_wheels, build_sdist, parse_commit_info]
    if: contains(needs.parse_commit_info.outputs.can_pre_release, 'true')
    steps:
      - name: Checkout scikit-misc
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install Release Requirements
        run: |
          pip install -r requirements/release.txt

      - name: Download wheels
        uses: actions/download-artifact@v3
        with:
          name: wheels
          path: dist

      - name: Publish to TestPyPI
        run: |
          ls -la ${{ github.workspace }}/dist

          # publish wheels first so that there is no window where users
          # may accidentally install an sdist instead of a wheel
          twine upload --skip-existing --repository testpypi ${{ github.workspace }}/dist/*.whl
          twine upload --skip-existing --repository testpypi ${{ github.workspace }}/dist/*.tar.gz
        env:
          TWINE_USERNAME: ${{ secrets.TWINE_USERNAME_TEST }}
          TWINE_PASSWORD: ${{ secrets.TWINE_PASSWORD_TEST }}
